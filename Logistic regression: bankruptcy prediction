{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic regression: Bankruptcy prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The focus of this project is the construction of logistic regression model, which will classify bank clients bankruptcy based on their background.\n",
    "\n",
    "The sample data - 700 client profiles with information on their:\n",
    "- Age in years\n",
    "- Level of education\n",
    "- Years with current employer\n",
    "- Years at current address\n",
    "- Household income in thousands\n",
    "- Debt to income ratio (x100)\n",
    "- Credit card debt in thousands\n",
    "- Other debt in thousands"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import statsmodels.api as sm\n",
    "\n",
    "import sklearn.metrics as sklm\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.linear_model import LogisticRegression as LR"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Read the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>default</th>\n",
       "      <th>age</th>\n",
       "      <th>educ</th>\n",
       "      <th>employ</th>\n",
       "      <th>address</th>\n",
       "      <th>income</th>\n",
       "      <th>debtinc</th>\n",
       "      <th>creddebt</th>\n",
       "      <th>othdebt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>35</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>4</td>\n",
       "      <td>74</td>\n",
       "      <td>13.4</td>\n",
       "      <td>4.52</td>\n",
       "      <td>5.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "      <td>21</td>\n",
       "      <td>7.5</td>\n",
       "      <td>0.57</td>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>11.8</td>\n",
       "      <td>0.44</td>\n",
       "      <td>4.28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   default  age  educ  employ  address  income  debtinc  creddebt  othdebt\n",
       "0        0   38     1      11       13      35      8.0      1.27     1.53\n",
       "1        0   44     2      18        4      74     13.4      4.52     5.39\n",
       "2        0   33     1       6       14      21      7.5      0.57     1.01\n",
       "3        0   25     2       6        2      26      4.5      0.07     1.10\n",
       "4        0   26     2       8        1      40     11.8      0.44     4.28"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read the training and test samples\n",
    "df_bank_train=pd.read_csv(\"bankloans_train.csv\")\n",
    "df_bank_test=pd.read_csv(\"bankloans_test.csv\")\n",
    "\n",
    "df_bank_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>educ</th>\n",
       "      <th>employ</th>\n",
       "      <th>address</th>\n",
       "      <th>income</th>\n",
       "      <th>debtinc</th>\n",
       "      <th>creddebt</th>\n",
       "      <th>othdebt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>35</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>4</td>\n",
       "      <td>74</td>\n",
       "      <td>13.4</td>\n",
       "      <td>4.52</td>\n",
       "      <td>5.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "      <td>21</td>\n",
       "      <td>7.5</td>\n",
       "      <td>0.57</td>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>11.8</td>\n",
       "      <td>0.44</td>\n",
       "      <td>4.28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  educ  employ  address  income  debtinc  creddebt  othdebt\n",
       "0   38     1      11       13      35      8.0      1.27     1.53\n",
       "1   44     2      18        4      74     13.4      4.52     5.39\n",
       "2   33     1       6       14      21      7.5      0.57     1.01\n",
       "3   25     2       6        2      26      4.5      0.07     1.10\n",
       "4   26     2       8        1      40     11.8      0.44     4.28"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get X_train and y_train\n",
    "X_train = df_bank_train.drop(\"default\", axis=1)\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "3    0\n",
       "4    0\n",
       "Name: default, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get y_train\n",
    "y_train = df_bank_train[\"default\"]\n",
    "y_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get X_test and y_test\n",
    "X_test = df_bank_test.drop(\"default\", axis=1)\n",
    "y_test = df_bank_test[\"default\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Run a traditional logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.384243\n",
      "         Iterations 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\danil\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Logit Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>default</td>     <th>  No. Observations:  </th>  <td>   560</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                 <td>Logit</td>      <th>  Df Residuals:      </th>  <td>   551</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                 <td>MLE</td>       <th>  Df Model:          </th>  <td>     8</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Sun, 15 Dec 2019</td> <th>  Pseudo R-squ.:     </th>  <td>0.3191</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>02:18:55</td>     <th>  Log-Likelihood:    </th> <td> -215.18</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>converged:</th>             <td>True</td>       <th>  LL-Null:           </th> <td> -316.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>  LLR p-value:       </th> <td>2.867e-39</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>        <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>    <td>   -1.6920</td> <td>    0.714</td> <td>   -2.371</td> <td> 0.018</td> <td>   -3.091</td> <td>   -0.293</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age</th>      <td>    0.0305</td> <td>    0.019</td> <td>    1.602</td> <td> 0.109</td> <td>   -0.007</td> <td>    0.068</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>educ</th>     <td>    0.1524</td> <td>    0.137</td> <td>    1.114</td> <td> 0.265</td> <td>   -0.116</td> <td>    0.421</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>employ</th>   <td>   -0.2620</td> <td>    0.037</td> <td>   -7.022</td> <td> 0.000</td> <td>   -0.335</td> <td>   -0.189</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>address</th>  <td>   -0.0987</td> <td>    0.026</td> <td>   -3.835</td> <td> 0.000</td> <td>   -0.149</td> <td>   -0.048</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>income</th>   <td>   -0.0053</td> <td>    0.010</td> <td>   -0.508</td> <td> 0.611</td> <td>   -0.026</td> <td>    0.015</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>debtinc</th>  <td>    0.0558</td> <td>    0.037</td> <td>    1.497</td> <td> 0.134</td> <td>   -0.017</td> <td>    0.129</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>creddebt</th> <td>    0.6147</td> <td>    0.127</td> <td>    4.852</td> <td> 0.000</td> <td>    0.366</td> <td>    0.863</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>othdebt</th>  <td>    0.1045</td> <td>    0.096</td> <td>    1.094</td> <td> 0.274</td> <td>   -0.083</td> <td>    0.292</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                           Logit Regression Results                           \n",
       "==============================================================================\n",
       "Dep. Variable:                default   No. Observations:                  560\n",
       "Model:                          Logit   Df Residuals:                      551\n",
       "Method:                           MLE   Df Model:                            8\n",
       "Date:                Sun, 15 Dec 2019   Pseudo R-squ.:                  0.3191\n",
       "Time:                        02:18:55   Log-Likelihood:                -215.18\n",
       "converged:                       True   LL-Null:                       -316.00\n",
       "Covariance Type:            nonrobust   LLR p-value:                 2.867e-39\n",
       "==============================================================================\n",
       "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         -1.6920      0.714     -2.371      0.018      -3.091      -0.293\n",
       "age            0.0305      0.019      1.602      0.109      -0.007       0.068\n",
       "educ           0.1524      0.137      1.114      0.265      -0.116       0.421\n",
       "employ        -0.2620      0.037     -7.022      0.000      -0.335      -0.189\n",
       "address       -0.0987      0.026     -3.835      0.000      -0.149      -0.048\n",
       "income        -0.0053      0.010     -0.508      0.611      -0.026       0.015\n",
       "debtinc        0.0558      0.037      1.497      0.134      -0.017       0.129\n",
       "creddebt       0.6147      0.127      4.852      0.000       0.366       0.863\n",
       "othdebt        0.1045      0.096      1.094      0.274      -0.083       0.292\n",
       "==============================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# estimate a logistic regression (with SM)\n",
    "XX_train = sm.add_constant(X_train)\n",
    "sm_logit_model = sm.Logit(y_train, XX_train)\n",
    "sm_logit_model.fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Redundant feature elimination"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[False False  True  True False False  True  True]\n",
      "[4 2 1 1 5 3 1 1]\n"
     ]
    }
   ],
   "source": [
    "# set up the the LR-estimator with SKLearn\n",
    "sk_logreg = LR(random_state=0, solver='lbfgs', max_iter = 1000)\n",
    "\n",
    "rfe = RFE(sk_logreg, n_features_to_select=None)\n",
    "rfe = rfe.fit(X_train, y_train.values.ravel())\n",
    "\n",
    "# print out the results of RFE\n",
    "print(rfe.support_)\n",
    "print(rfe.ranking_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Making predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# estimate an SKlearn logistic regression\n",
    "sk_clfr = sk_logreg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.1. Prediction of classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,\n",
       "       0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0,\n",
       "       1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 0, 0], dtype=int64)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict for the test sample (with the default cut-off value 50%)\n",
    "y_test_pred = sk_clfr.predict(X_test)\n",
    "y_test_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "default   0   1\n",
      "row_0          \n",
      "0        90  23\n",
      "1         8  19\n"
     ]
    }
   ],
   "source": [
    "# construct a confusion matrix\n",
    "CM50 = pd.crosstab(index=y_test_pred, columns=y_test, margins=False)\n",
    "print(CM50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.92      0.85        98\n",
      "           1       0.70      0.45      0.55        42\n",
      "\n",
      "    accuracy                           0.78       140\n",
      "   macro avg       0.75      0.69      0.70       140\n",
      "weighted avg       0.77      0.78      0.76       140\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# classification report\n",
    "print(sklm.classification_report(y_true=y_test, y_pred = y_test_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7785714285714286"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the accuracy directly \n",
    "sk_clfr.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.2. Prediction of probabilities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.86496633, 0.13503367],\n",
       "       [0.98678785, 0.01321215],\n",
       "       [0.73687035, 0.26312965],\n",
       "       [0.98566757, 0.01433243]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred_probs = sk_clfr.predict_proba(X_test)\n",
    "y_test_pred_probs[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 1, 0])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# change cut-off value from 50% to 25%\n",
    "y_test_pred_classes = np.array([(y_test_pred_probs[i][1]>0.25).astype(int) for i in range(len(X_test))])\n",
    "y_test_pred_classes[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "default   0   1\n",
      "row_0          \n",
      "0        68  11\n",
      "1        30  31\n"
     ]
    }
   ],
   "source": [
    "# construct confusion matrix again\n",
    "CM25 = pd.crosstab(index=y_test_pred_classes, columns=y_test, margins=False)\n",
    "print(CM25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.69      0.77        98\n",
      "           1       0.51      0.74      0.60        42\n",
      "\n",
      "    accuracy                           0.71       140\n",
      "   macro avg       0.68      0.72      0.69       140\n",
      "weighted avg       0.75      0.71      0.72       140\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# classification report\n",
    "print(sklm.classification_report(y_true=y_test, y_pred = y_test_pred_classes))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "position": {
    "height": "330px",
    "left": "582px",
    "right": "20px",
    "top": "107px",
    "width": "667px"
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
